" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction


" My VIMRC

" se nocp
" filetype plugin on
" syntax on	" 문법 표시를 사용한다. syntax enable과 같다. 비활성화는 syntax off or syntax clear

se nocp		" set nocompatible : vi와 호환모드를 해제하고 Vim의 향상된(Improved) 기능을 사용할 수 있게 한다.
filetype plugin on
syntax on	" 문법 표시를 사용한다. syntax enable과 같다. 비활성화는 syntax off 또는 syntax clear


let g:vimwiki_list = [
    \{
    \    'path': 'E:\Dropbox\wiki',
    \    'ext' : '.md',
    \    'diary_rel_path': 'diary/',
    \},
    \{
    \    'path': 'E:\Dropbox\healthcare',
    \    'ext' : '.md',
    \    'diary_rel_path': 'diary/',
    \},
    \{
    \    'path': 'E:\Dropbox\eip',
    \    'ext' : '.md',
    \    'diary_rel_path': 'diary',
    \},
\]

" Vim-Plug 실행
call plug#begin()
  Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
  Plug 'nanotech/jellybeans.vim'
call plug#end()


se nu		" set number : 화면에 행번호를 표시한다.

""""""""""""""""""""""
" Indent Setting
""""""""""""""""""""""
se ai		" set autoindent : 자동 들여쓰기를 사용한다. 새 행의 들여쓰기를 이전행의 들여쓰기와 동일하게 맞춰준다.
se cindent	" C언어 스타일의 들여쓰기를 사용한다.

""""""""""""""""""""""
" Tab Setting
""""""""""""""""""""""
se ts=4		" set tabstop : 탭 크기를 지정한다. 탭 하나를 몇 개의 공백으로 표시할지 결정한다. 기본값은 8.
se sts=4	" softtabstop 
se sw=4		" set shiftwidth : cindent를 설정한 다음 블록을 시작할 때 자동으로 들여쓰는 열의 너비를 설정한다.
se et		" expandtab : Tab을 space로 설정한다.
se tw=80	" set textwidth : 편집할 화면의 열 길이를 정한다(0이면 비활성화).
se hls		" set hlsearch : 하이라이트로 검색어를 강조한다.
se ru		" set ruler : 오른쪽 아래에 현재 위치를 표시한다.

"""""""""""""""""""""
" Search Setting
"""""""""""""""""""""
se ignorecase
se smartcase
se hls		" set hlsearch : 
se is		" set incsearch : 

"""""""""""""""""""""
" Encoding Setting
"""""""""""""""""""""
se fencs=ucs-bom,utf-8,korea
se fenc=utf-8


colo torte	" colorscheme : 색상 테마를 사용한다. 
if has("gui_running")
    "폰트 설정
    se gfn=D2Coding:h14:cHANGEUL:qDRAFT

    "Gvim 시작크기 설정
    au GUIEnter * winsize 120 50

    "Gvim 시작위치 설정
    au GUIEnter * winpos 0 0
endif


